initialize() {
	initializeSLiMModelType("nonWF");
	// define constant is a good way to set up parameters
	// there are two way to input parameters from the command line. The option below says that when you are in the GUI the values are taken from here, if not the simulation will expect to be define from the command line
	
	// the way to run from the command line is 
	// slim -t -d "parameter=value" slim_script.slim
	// -t is to time the run
	if (exists("slimgui"))
	{
		defineConstant("K", 5000);	// carrying capacity
		defineConstant("Ls", 1); // mean of poisson distribtuion from which each litter size will be selected
		defineConstant("hmode",2); // the mode dominance coefficients are considered, 1= h gamma distribution, 2 = fixed hs relationship; see below
		defineConstant("rho",1e-6); // recombination rate
		defineConstant("mu",1e-6); // mutation rate
		defineConstant("geneLength", 1000); // length of each gene
		defineConstant("g", 50); // number of genes
		defineConstant("Seed",getSeed()); // gets seed
	}
	
	// the second way is to say, if the variable does not exist then taken if from here
	if (exists("outPref_in")==0){
		defineConstant("outPref_in","PREFIX");       // this variable defines the prefix for the output file
	}
	// mutation types
	del_mut=1000;                     
	hs=readFile("hs_in.txt");   // loads deleterious mutations from previously modelled stable populations
	hs=hs[1:(length(hs)-1)];
	hs=hs[sample(0:(length(hs)-1),del_mut)];
	s=sapply(hs,"asFloat(strsplit(applyValue,'\t')[3]);"); // applies the selection coefficient 
	s=-1*s;
	h=sapply(hs,"asFloat(strsplit(applyValue,'\t')[4]);"); // applies the dominance coefficient 
	prop=rep(1/del_mut,del_mut);
	prop_exons=sapply(prop,"(applyValue*2)/5;");  // determines the relative frequency of each mutation
	HEAD="Mut" +"\t"+ "Dom_coeff" +"\t"+ "Sel_coeff";
	writeFile("Mutations_Seed_"+getSeed()+".txt",HEAD,append=F);  // saves the neutal mutations to be load into future simulations
	// define mutation types	
	for (i in 0:(length(prop)-1))
	{
		initializeMutationType(i+2, h[i], "f", asFloat(s[i]));
		print("mut:"+(i+2)+" - " + "h:"+h[i]+" - "+ "s:" + asFloat(s[i]));
		writeFile("Mutations_Seed_"+getSeed()+".txt",(i+2) +"\t"+ asString(h[i]) +"\t"+ (s[i]),append=T);
	}
	
	defineConstant("mut_neutral", 1); //  store neutral mutation id
	initializeMutationType('m1', 0.5, "f", 0.0);         // neutral
	m1.convertToSubstitution = T;
	
	// distribution of mutation types
	initializeGenomicElementType("g1", 2:(del_mut+1), c(prop_exons));  // removes neutral mutations
	
	
	initializeMutationRate(mu);
	
	
	// proportional distribution of genes per chromosome
	// this section of code produces an exome of a number of genes defined by the constant g, and each gene is of a length of base pairs defined by the constant geneLength
	// in this exome recombination can occur between genes but not within them
	genePropsFile=readFile("chr_genes_in.txt");
	gene_props=sapply(genePropsFile[1:(length(genePropsFile)-1)],"asFloat(strsplit(applyValue,'\t')[0]);");
	gene_nums = round(gene_props*g);
	if(sum(gene_nums)<g){DIFF=g-sum(gene_nums);gene_nums[0]=gene_nums[0]+DIFF;}
	if(sum(gene_nums)>g){DIFF=sum(gene_nums)-g;gene_nums[0]=gene_nums[0]-DIFF;}
	
	for (i in 1:g){
		initializeGenomicElement(g1, ((i-1)*geneLength)+(i-1), (i*geneLength)+(i-2) );
	}
	
	// recombination rates so recombination occurs between genes but not within genes
	rates=NULL;
	
	// Multiple chromosomes:
	for (i in 1:(size(gene_nums)-1)){
		rates=c(rates, 0, rep(c(rho, 0), asInteger(gene_nums[i-1]-1)), 0.5);
	}
	rates=c(rates, 0, rep(c(rho, 0), asInteger(gene_nums[size(gene_nums)-1]-1)));
	
	ends=NULL;
	for (i in 1:g){
		ends=c(ends, (i*geneLength)+(i-2), (i*geneLength)+(i-1));  
	}
	ends=ends[0:(size(ends)-2)];
	
	initializeRecombinationRate(rates, ends);

}
reproduction() {
	// randomize the order of p1.individuals
	parents = sample(p1.individuals, p1.individualCount);
	// draws random mating pairs
	for (i in seq(0, p1.individualCount -1))
	{
		parent1 = parents[i];
		parent2 = sample(parents, 1);
		do {                               
			parent2 = sample(parents, 1); // redraws if same parent is selected twice to avoid selfing
		}
		while(parent1 == parent2);
		litterSize = rpois(1, Ls);    // draws a litter size number from poisson distribution with mean Ls
		for (j in seqLen(litterSize))
			p1.addCrossed(parent1, parent2); // creates offspring 
	}
	self.active = 0;
}

1 {
	sim.addSubpop("p1", K);
	
	// our prefix + parameters
	defineConstant("outPref",outPref_in+"_Genes"+g+"_Gene_length"+geneLength+"_K"+K+"_LitterSize"+Ls+"_hmode"+hmode+"_rho"+rho+"_mu"+mu+"_seed"+getSeed());
	

	HEAD="Gen" +"\t" + "pop" +"\t"+ "N"+"\t"+ "mutCount" +"\t"+ "Pop_size" +"\t"+ "NA" +"\t"+ "totalLoad" +"\t"+ "relzLoad" +"\t"+ "relzLoad_homo" +"\t"+ "relzLoad_hetero" +"\t"+ "mskLoad" +"\t"+ "mean_fit(ind)" +"\t"+ "sd_fit(ind)" +"\t"+ "mean_fit(cached)" +"\t"+ "sd_fit(cached)";   // creates headers for the output data
	writeFile(outPref + "_popLoad.txt",HEAD,append=F);
	
	
	
	print("################");
	print("\n" + outPref + "\n");
	print("################");

}
early() {
	p1.fitnessScaling = K/p1.individualCount;  // rescales the fitness of all individuals by dividing the the carrying capacity by the population size
	}
	

/// Print progress
1: late() {
	if(sim.generation == 1 | sim.generation % 100 ==0){
		print(date() + "\t" + time() + "\t" + "generation: " + sim.generation + "\t" + "N: " + p1.individualCount+ "  memory usage: "+usage()/1000+"Gb");
	}
}

2: late() {
	// output generated every 100 generations
	if(sim.generation % 100 ==0){
		print("Outoput metrics" + "\t" + sim.generation + "\t" + time() + "\t" + date());
		for(pop in sim.subpopulations){	
			OUT=getPopSumm(p1, 100);  // samples 100 individuals from the population and returns: population size, mutation count, total load, realised load, realised load due to heterozygous mutations, realised load due to homozygous mutations, maksed load, mean and standard deviation of fitness both calculated by the function and produced by the cachedFitness() callback
			writeFile(outPref + "_popLoad.txt",OUT,append=T);
		}
	}
}


9999 late() { sim.outputFull("PATH_TO /Population_Seed_"+ getSeed() +".txt"); }    // produces the burn in population to be loaded into main models 
10000 late() { sim.simulationFinished(); }




//Functions

function (s) getPopSumm(o pop, i sampleSize)
{
	Pop_size = pop.individualCount;
	mNeutral=sim.mutationTypes[sim.mutationTypes.id==mut_neutral]; 
	i=pop.sampleIndividuals(sampleSize);
	indvCount=length(i);
	m = i.uniqueMutations;
	m_uniq = unique(m);
	m_uniq=m_uniq[m_uniq.mutationType!=mNeutral];
	Mutcount=length(m_uniq);
	freqMut=sim.mutationFrequencies(pop,m_uniq);
	ScoefMut=abs(m_uniq.selectionCoeff);
	DcoefMut=m_uniq.mutationType.dominanceCoeff;
	totalLoad=sum(freqMut*ScoefMut);
	relzLoad_homo=sum(freqMut^2*ScoefMut);
	relzLoad_hetero=2*sum(freqMut*(1-freqMut)*ScoefMut*DcoefMut);
	relzLoad=sum(freqMut^2*ScoefMut)+ (2*sum(freqMut*(1-freqMut)*ScoefMut*DcoefMut));
	mskLoad=sum(freqMut*ScoefMut) - sum(freqMut^2*ScoefMut) - (2*sum(freqMut*(1-freqMut)*ScoefMut*DcoefMut));
	
	fitness_indv=c();
	for(indv in pop.individuals){
		// Calculate individual fitness
		muts0_m2 = indv.genomes[0].mutations;
		muts1_m2 = indv.genomes[1].mutations;
		HOMO_m2=setIntersection(muts0_m2,muts1_m2);
		HETERO_m2=setSymmetricDifference(muts0_m2,muts1_m2);
		if(length(HETERO_m2)>0){fit_hetero=1-(abs(HETERO_m2.selectionCoeff)*HETERO_m2.mutationType.dominanceCoeff);}
		if(length(HETERO_m2)==0){fit_hetero=1;}
		fit_homo=1-abs(HOMO_m2.selectionCoeff);
		if(length(fit_homo)==0){fit_homo=1;}
		indv_fit=product(c(fit_hetero,fit_homo));
		fitness_indv=c(fitness_indv,indv_fit);
	}
	
	fitness_cached=pop.cachedFitness(pop.individuals.index);
	
	
	out=sim.generation +"\t"+ pop.id +"\t"+ indvCount +"\t"+ Mutcount +"\t"+ Pop_size +"\t"+ "NA" +"\t"+ totalLoad +"\t"+ relzLoad +"\t"+ relzLoad_homo +"\t"+ relzLoad_hetero +"\t"+ mskLoad +"\t"+mean(fitness_indv)+"\t"+sd(fitness_indv)+"\t"+mean(fitness_cached)+"\t"+sd(fitness_cached);
	return(out);
}
