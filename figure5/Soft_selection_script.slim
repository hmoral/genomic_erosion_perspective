initialize() {
	initializeSLiMModelType("nonWF");
	// define constant is a good way to set up parameters
	// there are two way to input parameters from the command line. The option below says that when you are in the GUI the values are taken from here, if not the simulation will expect to be define from the command line
	
	// the way to run from the command line is 
	// slim -t -d "parameter=value" slim_script.slim
	// -t is to time the run
	if (exists("slimgui"))
	{
		defineConstant("K", 5000);	// carrying capacity
		defineConstant("Ls", 5); // mean of poisson distribtuion from which each litter size will be selected
		defineConstant("GenLoadth", 1.7); // Genetic Load threshold
		defineConstant("hmode",2); // the mode dominance coefficients are considered, 1= h gamma distribution, 2 = fixed hs relationship; see below
		defineConstant("rho",1e-06); // recombination rate
		defineConstant("mu",1e-06); // mutation rate
		defineConstant("geneLength", 1000); // length of each gene
		defineConstant("g", 50); // number of genes
	}
	
	// the second way is to say, if the variable does not exist then taken if from here
	if (exists("outPref_in")==0){
		defineConstant("outPref_in","PREFIX");       // this variable defines the prefix for the output file
	}
	
	defineConstant("Pop_fit",1);
	// mutation types
	//del_mut=1000;
	hs=readFile("/PATH_TO/Mutations_Seed_"+getSeed()+".txt"); // loads mutations from burn in population
	hs=hs[1:(length(hs)-1)];
	s=sapply(hs,"asFloat(strsplit(applyValue,'\t')[2]);"); // applies the selection coefficient
	del_mut=length(s);
	h=sapply(hs,"asFloat(strsplit(applyValue,'\t')[1]);"); // applies the dominance coefficient 
	prop=rep(1/1000,del_mut);    // determines the relative frequency of each mutation
	prop_exons=sapply(prop,"(applyValue);");
	// define mutation types	
	for (i in 0:(length(prop)-1))
	{
		initializeMutationType(i+2, h[i], "f", asFloat(s[i]));
		print("mut:"+(i+2)+" - " + "h:"+h[i]+" - "+ "s:" + asFloat(s[i]));
	}
	
	defineConstant("mut_neutral", 1); //  store neutral mutation id
	initializeMutationType('m1', 0.5, "f", 0.0);         // created neutral mutation
	m1.convertToSubstitution = T;
	
	// distribution of mutation types
	initializeGenomicElementType("g1", 2:(del_mut+1), (prop_exons));   
	
	
	initializeMutationRate(mu);
	
	
	// proportional distribution of genes per chromosome
	// this section of code produces an exome of a number of genes defined by the constant g, and each gene is of a length of base pairs defined by the constant geneLength
	// in this exome recombination can occur between genes but not within them
	genePropsFile=readFile("chr_genes_in.txt");
	gene_props=sapply(genePropsFile[1:(length(genePropsFile)-1)],"asFloat(strsplit(applyValue,'\t')[0]);");
	gene_nums = round(gene_props*g);
	if(sum(gene_nums)<g){DIFF=g-sum(gene_nums);gene_nums[0]=gene_nums[0]+DIFF;}
	if(sum(gene_nums)>g){DIFF=sum(gene_nums)-g;gene_nums[0]=gene_nums[0]-DIFF;}
	
	for (i in 1:g){
		initializeGenomicElement(g1, ((i-1)*geneLength)+(i-1), (i*geneLength)+(i-2) );
	}
	
	// recombination rates so recombination occurs between genes but not within genes
	rates=NULL;
	
	// Multiple chromosomes:
	for (i in 1:(size(gene_nums)-1)){
		rates=c(rates, 0, rep(c(rho, 0), asInteger(gene_nums[i-1]-1)), 0.5);
	}
	rates=c(rates, 0, rep(c(rho, 0), asInteger(gene_nums[size(gene_nums)-1]-1)));
	
	ends=NULL;
	for (i in 1:g){
		ends=c(ends, (i*geneLength)+(i-2), (i*geneLength)+(i-1));
	}
	ends=ends[0:(size(ends)-2)];
	
	initializeRecombinationRate(rates, ends);

}

reproduction() {
	// randomize the order of p1.individuals
	if (p1.individualCount == 0) {
		print("Population has gone extinct"); // ends simulations if there are no individuals left
		sim.simulationFinished(); }
	// randomize the order of p1.individuals
	parents = sample(p1.individuals, p1.individualCount);
	// draws random mating pairs
	for (i in seq(0, p1.individualCount -1))
	{
		parent1 = parents[i];
		parent2 = sample(parents, 1);
		do {											// redraws if same parent is selected twice to avoid selfing
			parent2 = sample(parents, 1);
		}
		while(parent1 == parent2);
		litterSize = rpois(1, Ls);  // draws a litter size number from poisson distribution with mean Ls
		for (j in seqLen(litterSize))
			p1.addCrossed(parent1, parent2); // creates offspring 
	}
	self.active = 0;
}




1 {
	sim.readFromPopulationFile("PATH_TO /Population_Seed_"+getSeed()+".txt"); // loads burn in population
	
	// our prefix + parameters
	defineConstant("outPref",outPref_in+"_Genes"+g+"_Gene_length"+geneLength+"_K"+K+"_LitterSize"+Ls+"_hmode"+hmode+"_rho"+rho+"_mu"+mu+"_seed"+getSeed());
	
	
	HEAD="Gen" +"\t" + "pop" +"\t"+ "N"+"\t"+ "mutCount" +"\t"+ "Pop_size" +"\t"+ "NA" +"\t"+ "totalLoad" +"\t"+ "relzLoad" +"\t"+ "relzLoad_homo" +"\t"+ "relzLoad_hetero" +"\t"+ "mskLoad" +"\t"+ "mean_fit(ind)" +"\t"+ "sd_fit(ind)" +"\t"+ "var_fit(ind)" +"\t"+ "mean_fit(cached)" +"\t"+ "sd_fit(cached)"; // creates headers for the output data
	writeFile(outPref + "_popLoad.txt",HEAD,append=F);   // creates file to produce output every hundred generations
	
	print("################");
	print("\n" + outPref + "\n");
	print("################");

}


/// Print progress
10001: late() {
	if(sim.generation == 1 | sim.generation % 100 ==0){
		print(date() + "\t" + time() + "\t" + "generation: " + sim.generation + "\t" + "N: " + p1.individualCount+ "  memory usage: "+usage()/1000+"Gb");
	}
}

9998: early() {
	sim.recalculateFitness();    // recalculates fitness of each individual in the population
	offspringA = p1.individuals.age == 0; // creates logical arrray for individuals from the popualtion whose age == 0
	vals = c(0:(size(offspringA)-1)); 
	offspringID = vals[offspringA]; // Creates identification numbers from the population of individuals whose name == 0
	FA = p1.cachedFitness(NULL); // produces an array of the genetic fitness of each individual
	RA = sample((c(0:100)/100), size(FA), replace = T); // produces an array of random numbers to be used as the fitness derived from environmental variation
	TA = FA + RA; // adds the to arrays together to produce a total fitness with a heritability of 0.5
	oTA = TA[offspringID]; // subsets the array of fitnesses to include only values for the offspring 
	sTA = sort(oTA, ascending = F); // puts the value of fitness values in order 
	TAth = sTA[K-1]; // identifies the nth value that corresponds to the size of the carrying capacity
	TF = TA >= TAth; // indentifies those whose fitness is above this values
	DF = TA < TAth; // indentifies those whose fitness is below this values
	fit_ind = p1.individuals[TF]; 
	fit_ind[fit_ind.age ==0].fitnessScaling =10; // rescales all those whose fitness is above the nth value and has an age == 0  *10
	fit_ind[fit_ind.age >0].fitnessScaling =0; // rescales all those whose fitness is above the nth value and has an age > 0  to 0
	p1.individuals[DF].fitnessScaling =0; // rescales all those whose fitness is below the nth value to 0
	}


10002: late() {
	if(sim.generation % 100 ==0){
		if (p1.individualCount == 0) {
			print("Population has gone extinct");  // stops the simulation if the population is extinct
			sim.simulationFinished(); }
			else if (p1.individualCount >= 100) {
		print("Outoput metrics" + "\t" + sim.generation + "\t" + time() + "\t" + date());
		for(pop in sim.subpopulations){	
			OUT=getPopSumm(p1, 100);
			writeFile(outPref + "_popLoad.txt",OUT,append=T); // samples 100 individuals from the population and returns: population size, mutation count, total load, realised load, realised load due to heterozygous mutations, realised load due to homozygous mutations, maksed load, mean and standard deviation of fitness both calculated by the function and produced by the cachedFitness() callback
			}
		}
	}
}


20001 late() { sim.simulationFinished(); } // finishes the simulation after a total of 20000 generations. The first 10000 generation were run in the burn in simualation so this simulation ran for a further 10000  


function (s) getPopSumm(o pop, i sampleSize)
{
	Pop_size = pop.individualCount;
	mNeutral=sim.mutationTypes[sim.mutationTypes.id==mut_neutral];
	i=pop.sampleIndividuals(sampleSize);
	indvCount=length(i);
	m = i.uniqueMutations;
	m_uniq = unique(m);
	m_uniq=m_uniq[m_uniq.mutationType!=mNeutral];
	Mutcount=length(m_uniq);
	freqMut=sim.mutationFrequencies(pop,m_uniq);
	ScoefMut=abs(m_uniq.selectionCoeff);
	DcoefMut=m_uniq.mutationType.dominanceCoeff;
	totalLoad=sum(freqMut*ScoefMut);
	relzLoad_homo=sum(freqMut^2*ScoefMut);
	relzLoad_hetero=2*sum(freqMut*(1-freqMut)*ScoefMut*DcoefMut);
	relzLoad=sum(freqMut^2*ScoefMut)+ (2*sum(freqMut*(1-freqMut)*ScoefMut*DcoefMut));
	mskLoad=sum(freqMut*ScoefMut) - sum(freqMut^2*ScoefMut) - (2*sum(freqMut*(1-freqMut)*ScoefMut*DcoefMut));
	
	fitness_indv=c();
	for(indv in pop.individuals){
		// Calculate individual fitness
		muts0_m2 = indv.genomes[0].mutations;
		muts1_m2 = indv.genomes[1].mutations;
		HOMO_m2=setIntersection(muts0_m2,muts1_m2);
		HETERO_m2=setSymmetricDifference(muts0_m2,muts1_m2);
		if(length(HETERO_m2)>0){fit_hetero=1-(abs(HETERO_m2.selectionCoeff)*HETERO_m2.mutationType.dominanceCoeff);}
		if(length(HETERO_m2)==0){fit_hetero=1;}
		fit_homo=1-abs(HOMO_m2.selectionCoeff);
		if(length(fit_homo)==0){fit_homo=1;}
		indv_fit=product(c(fit_hetero,fit_homo));
		fitness_indv=c(fitness_indv,indv_fit);
	}
	
	fitness_cached=pop.cachedFitness(pop.individuals.index);
	
	
	out=sim.generation +"\t"+ pop.id +"\t"+ indvCount +"\t"+ Mutcount +"\t"+ Pop_size +"\t"+ "NA" +"\t"+ totalLoad +"\t"+ relzLoad +"\t"+ relzLoad_homo +"\t"+ relzLoad_hetero +"\t"+ mskLoad +"\t"+mean(fitness_indv)+"\t"+sd(fitness_indv)+"\t"+var(fitness_indv)+"\t"+mean(fitness_cached)+"\t"+sd(fitness_cached);
	return(out);
}

